Terminals unused in grammar

    T_LEFTSHIFT
    T_RIGHTSHIFT
    T_PRINTLN
    T_CONTINUE


State 32 conflicts: 13 reduce/reduce
State 53 conflicts: 8 shift/reduce
State 80 conflicts: 8 shift/reduce
State 81 conflicts: 8 shift/reduce
State 93 conflicts: 3 reduce/reduce
State 114 conflicts: 13 shift/reduce
State 115 conflicts: 13 shift/reduce
State 116 conflicts: 13 shift/reduce
State 117 conflicts: 13 shift/reduce
State 118 conflicts: 13 shift/reduce
State 119 conflicts: 13 shift/reduce
State 120 conflicts: 13 shift/reduce
State 121 conflicts: 13 shift/reduce, 15 reduce/reduce
State 122 conflicts: 13 shift/reduce
State 123 conflicts: 13 shift/reduce
State 172 conflicts: 13 shift/reduce
State 190 conflicts: 1 shift/reduce
State 191 conflicts: 13 shift/reduce
State 192 conflicts: 13 shift/reduce
State 215 conflicts: 13 shift/reduce


Grammar

    0 $accept: START $end

    1 START: PROG

    2 PROG: T_INCLUDE T_HEADER PROG
    3     | MAIN PROG
    4     | DECLR ';' PROG
    5     | ASSGN ';' PROG
    6     | ε

    7 DECLR: TYPE LISTVAR

    8 LISTVAR: LISTVAR ',' VAR
    9        | VAR

   10 VAR: T_ID '=' EXPR
   11    | T_ID
   12    | T_ID '[' T_NUM ']'
   13    | T_ID ARRAY_DECL

   14 TYPE: T_INT
   15     | T_FLOAT
   16     | T_DOUBLE
   17     | T_CHAR
   18     | T_BOOLEAN

   19 $@1: ε

   20 ASSGN: T_ID $@1 '=' EXPR
   21      | T_ID '[' EXPR ']' '=' EXPR

   22 EXPR: EXPR REL_OP E
   23     | EXPR T_OROR EXPR
   24     | EXPR T_ANDAND EXPR
   25     | T_NOT EXPR
   26     | T_BOOLLITERAL
   27     | T_STRLITERAL
   28     | E

   29 E: E '+' T
   30  | E '-' T
   31  | T

   32 T: T '*' F
   33  | T '/' F
   34  | F

   35 F: '(' EXPR ')'
   36  | T_ID
   37  | T_NUM
   38  | T_STRLITERAL
   39  | UPDATE

   40 UPDATE: T_INC T_ID
   41       | T_DEC T_ID
   42       | T_ID T_INC
   43       | T_ID T_DEC

   44 REL_OP: T_LESSEREQ
   45       | T_GREATEREQ
   46       | '<'
   47       | '>'
   48       | T_EQCOMP
   49       | T_NOTEQUAL

   50 ARRAY_DECL: ARRAY_DIM ARRAY_INIT
   51           | ARRAY_DIM
   52           | ARRAY_INIT

   53 ARRAY_DIM: '[' T_NUM ']' ARRAY_DIM
   54          | '[' T_ID ']'
   55          | '[' T_NUM ']'

   56 ARRAY_INIT: '=' '{' ARRAY_LIST '}'

   57 ARRAY_LIST: ARRAY_LIST ',' EXPR
   58           | EXPR

   59 $@2: ε

   60 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' '{' $@2 STMT '}'

   61 EMPTY_LISTVAR: LISTVAR
   62              | ε

   63 STMT: STMT_NO_BLOCK STMT
   64     | BLOCK STMT
   65     | IF_ELSE STMT
   66     | FOR_LOOP STMT
   67     | WHILE_LOOP STMT
   68     | SWITCH_STMT STMT
   69     | FUNC_DECL STMT
   70     | FUNC_DEF STMT
   71     | RET_STMT STMT
   72     | DO_WHILE_LOOP STMT
   73     | ε

   74 IF_ELSE: T_IF '(' COND ')' '{' STMT '}' T_ELSE '{' STMT '}' STMT
   75        | T_IF '(' COND ')' '{' STMT '}' STMT
   76        | T_IF '(' COND ')' STMT_NO_BLOCK STMT
   77        | T_IF '(' COND ')' STMT_NO_BLOCK T_ELSE STMT_NO_BLOCK STMT

   78 FOR_LOOP: T_FOR '(' FOR_INIT ';' COND ';' FOR_UP ')' '{' STMT '}'

   79 FOR_INIT: DECLR
   80         | ASSGN
   81         | ε

   82 FOR_UP: UPDATE
   83       | ASSGN
   84       | ε

   85 WHILE_LOOP: T_WHILE '(' COND ')' BLOCK

   86 DO_WHILE_LOOP: T_DO '{' STMT '}' T_WHILE '(' COND ')' ';'

   87 SWITCH_STMT: T_SWITCH '(' T_ID ')' '{' CASES '}'

   88 CASES: CASES CASE
   89      | CASE

   90 CASE: T_CASE T_NUM ':' STMT T_BREAK ';'

   91 FUNC_DECL: TYPE T_ID '(' PARAM_LIST ')' ';'

   92 FUNC_DEF: TYPE T_ID '(' PARAM_LIST ')' BLOCK
   93         | TYPE T_ID '(' PARAM_LIST ')' BLOCK RET_STMT

   94 PARAM_LIST: PARAM_LIST ',' PARAM
   95           | PARAM
   96           | ε

   97 PARAM: TYPE T_ID

   98 RET_STMT: T_RETURN EXPR ';'
   99         | T_RETURN ';'

  100 STMT_NO_BLOCK: DECLR ';'
  101              | ASSGN ';'
  102              | RET_STMT

  103 $@3: ε

  104 BLOCK: '{' $@3 STMT '}'

  105 COND: EXPR
  106     | ASSGN


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 35 60 74 75 76 77 78 85 86 87 91 92 93
    ')' (41) 35 60 74 75 76 77 78 85 86 87 91 92 93
    '*' (42) 32
    '+' (43) 29
    ',' (44) 8 57 94
    '-' (45) 30
    '/' (47) 33
    ':' (58) 90
    ';' (59) 4 5 78 86 90 91 98 99 100 101
    '<' (60) 46
    '=' (61) 10 20 21 56
    '>' (62) 47
    '[' (91) 12 21 53 54 55
    ']' (93) 12 21 53 54 55
    '{' (123) 56 60 74 75 78 86 87 104
    '}' (125) 56 60 74 75 78 86 87 104
    error (256)
    T_INT (258) 14
    T_CHAR (259) 17
    T_DOUBLE (260) 16
    T_INC (261) 40 42
    T_DEC (262) 41 43
    T_EQCOMP (263) 48
    T_NOTEQUAL (264) 49
    T_GREATEREQ (265) 45
    T_LESSEREQ (266) 44
    T_LEFTSHIFT (267)
    T_RIGHTSHIFT (268)
    T_PRINTLN (269)
    T_FLOAT (270) 15
    T_IF (271) 74 75 76 77
    T_ELSE (272) 74 77
    T_DO (273) 86
    T_INCLUDE (274) 2
    T_HEADER (275) 2
    T_MAIN (276) 60
    T_ID (277) 10 11 12 13 20 21 36 40 41 42 43 54 87 91 92 93 97
    T_NUM (278) 12 37 53 55 90
    T_FOR (279) 78
    T_WHILE (280) 85 86
    T_SWITCH (281) 87
    T_CASE (282) 90
    T_BREAK (283) 90
    T_CONTINUE (284)
    T_OROR (285) 23
    T_ANDAND (286) 24
    T_NOT (287) 25
    T_BOOLEAN (288) 18
    T_BOOLLITERAL (289) 26
    T_STRLITERAL (290) 27 38
    T_RETURN (291) 98 99


Nonterminals, with rules where they appear

    $accept (53)
        on left: 0
    START (54)
        on left: 1
        on right: 0
    PROG (55)
        on left: 2 3 4 5 6
        on right: 1 2 3 4 5
    DECLR (56)
        on left: 7
        on right: 4 79 100
    LISTVAR (57)
        on left: 8 9
        on right: 7 8 61
    VAR (58)
        on left: 10 11 12 13
        on right: 8 9
    TYPE (59)
        on left: 14 15 16 17 18
        on right: 7 60 91 92 93 97
    ASSGN (60)
        on left: 20 21
        on right: 5 80 83 101 106
    $@1 (61)
        on left: 19
        on right: 20
    EXPR (62)
        on left: 22 23 24 25 26 27 28
        on right: 10 20 21 22 23 24 25 35 57 58 98 105
    E (63)
        on left: 29 30 31
        on right: 22 28 29 30
    T (64)
        on left: 32 33 34
        on right: 29 30 31 32 33
    F (65)
        on left: 35 36 37 38 39
        on right: 32 33 34
    UPDATE (66)
        on left: 40 41 42 43
        on right: 39 82
    REL_OP (67)
        on left: 44 45 46 47 48 49
        on right: 22
    ARRAY_DECL (68)
        on left: 50 51 52
        on right: 13
    ARRAY_DIM (69)
        on left: 53 54 55
        on right: 50 51 53
    ARRAY_INIT (70)
        on left: 56
        on right: 50 52
    ARRAY_LIST (71)
        on left: 57 58
        on right: 56 57
    MAIN (72)
        on left: 60
        on right: 3
    $@2 (73)
        on left: 59
        on right: 60
    EMPTY_LISTVAR (74)
        on left: 61 62
        on right: 60
    STMT (75)
        on left: 63 64 65 66 67 68 69 70 71 72 73
        on right: 60 63 64 65 66 67 68 69 70 71 72 74 75 76 77 78 86 90 104
    IF_ELSE (76)
        on left: 74 75 76 77
        on right: 65
    FOR_LOOP (77)
        on left: 78
        on right: 66
    FOR_INIT (78)
        on left: 79 80 81
        on right: 78
    FOR_UP (79)
        on left: 82 83 84
        on right: 78
    WHILE_LOOP (80)
        on left: 85
        on right: 67
    DO_WHILE_LOOP (81)
        on left: 86
        on right: 72
    SWITCH_STMT (82)
        on left: 87
        on right: 68
    CASES (83)
        on left: 88 89
        on right: 87 88
    CASE (84)
        on left: 90
        on right: 88 89
    FUNC_DECL (85)
        on left: 91
        on right: 69
    FUNC_DEF (86)
        on left: 92 93
        on right: 70
    PARAM_LIST (87)
        on left: 94 95 96
        on right: 91 92 93 94
    PARAM (88)
        on left: 97
        on right: 94 95
    RET_STMT (89)
        on left: 98 99
        on right: 71 93 102
    STMT_NO_BLOCK (90)
        on left: 100 101 102
        on right: 63 76 77
    BLOCK (91)
        on left: 104
        on right: 64 85 92 93
    $@3 (92)
        on left: 103
        on right: 104
    COND (93)
        on left: 105 106
        on right: 74 75 76 77 78 85 86


State 0

    0 $accept: • START $end

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6
    T_BOOLEAN  shift, and go to state 7

    $default  reduce using rule 6 (PROG)

    START  go to state 8
    PROG   go to state 9
    DECLR  go to state 10
    TYPE   go to state 11
    ASSGN  go to state 12
    MAIN   go to state 13


State 1

   14 TYPE: T_INT •

    $default  reduce using rule 14 (TYPE)


State 2

   17 TYPE: T_CHAR •

    $default  reduce using rule 17 (TYPE)


State 3

   16 TYPE: T_DOUBLE •

    $default  reduce using rule 16 (TYPE)


State 4

   15 TYPE: T_FLOAT •

    $default  reduce using rule 15 (TYPE)


State 5

    2 PROG: T_INCLUDE • T_HEADER PROG

    T_HEADER  shift, and go to state 14


State 6

   20 ASSGN: T_ID • $@1 '=' EXPR
   21      | T_ID • '[' EXPR ']' '=' EXPR

    '['  shift, and go to state 15

    $default  reduce using rule 19 ($@1)

    $@1  go to state 16


State 7

   18 TYPE: T_BOOLEAN •

    $default  reduce using rule 18 (TYPE)


State 8

    0 $accept: START • $end

    $end  shift, and go to state 17


State 9

    1 START: PROG •

    $default  reduce using rule 1 (START)


State 10

    4 PROG: DECLR • ';' PROG

    ';'  shift, and go to state 18


State 11

    7 DECLR: TYPE • LISTVAR
   60 MAIN: TYPE • T_MAIN '(' EMPTY_LISTVAR ')' '{' $@2 STMT '}'

    T_MAIN  shift, and go to state 19
    T_ID    shift, and go to state 20

    LISTVAR  go to state 21
    VAR      go to state 22


State 12

    5 PROG: ASSGN • ';' PROG

    ';'  shift, and go to state 23


State 13

    3 PROG: MAIN • PROG

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6
    T_BOOLEAN  shift, and go to state 7

    $default  reduce using rule 6 (PROG)

    PROG   go to state 24
    DECLR  go to state 10
    TYPE   go to state 11
    ASSGN  go to state 12
    MAIN   go to state 13


State 14

    2 PROG: T_INCLUDE T_HEADER • PROG

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6
    T_BOOLEAN  shift, and go to state 7

    $default  reduce using rule 6 (PROG)

    PROG   go to state 25
    DECLR  go to state 10
    TYPE   go to state 11
    ASSGN  go to state 12
    MAIN   go to state 13


State 15

   21 ASSGN: T_ID '[' • EXPR ']' '=' EXPR

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    EXPR    go to state 34
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 16

   20 ASSGN: T_ID $@1 • '=' EXPR

    '='  shift, and go to state 39


State 17

    0 $accept: START $end •

    $default  accept


State 18

    4 PROG: DECLR ';' • PROG

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6
    T_BOOLEAN  shift, and go to state 7

    $default  reduce using rule 6 (PROG)

    PROG   go to state 40
    DECLR  go to state 10
    TYPE   go to state 11
    ASSGN  go to state 12
    MAIN   go to state 13


State 19

   60 MAIN: TYPE T_MAIN • '(' EMPTY_LISTVAR ')' '{' $@2 STMT '}'

    '('  shift, and go to state 41


State 20

   10 VAR: T_ID • '=' EXPR
   11    | T_ID •
   12    | T_ID • '[' T_NUM ']'
   13    | T_ID • ARRAY_DECL

    '='  shift, and go to state 42
    '['  shift, and go to state 43

    $default  reduce using rule 11 (VAR)

    ARRAY_DECL  go to state 44
    ARRAY_DIM   go to state 45
    ARRAY_INIT  go to state 46


State 21

    7 DECLR: TYPE LISTVAR •
    8 LISTVAR: LISTVAR • ',' VAR

    ','  shift, and go to state 47

    $default  reduce using rule 7 (DECLR)


State 22

    9 LISTVAR: VAR •

    $default  reduce using rule 9 (LISTVAR)


State 23

    5 PROG: ASSGN ';' • PROG

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_INCLUDE  shift, and go to state 5
    T_ID       shift, and go to state 6
    T_BOOLEAN  shift, and go to state 7

    $default  reduce using rule 6 (PROG)

    PROG   go to state 48
    DECLR  go to state 10
    TYPE   go to state 11
    ASSGN  go to state 12
    MAIN   go to state 13


State 24

    3 PROG: MAIN PROG •

    $default  reduce using rule 3 (PROG)


State 25

    2 PROG: T_INCLUDE T_HEADER PROG •

    $default  reduce using rule 2 (PROG)


State 26

   40 UPDATE: T_INC • T_ID

    T_ID  shift, and go to state 49


State 27

   41 UPDATE: T_DEC • T_ID

    T_ID  shift, and go to state 50


State 28

   36 F: T_ID •
   42 UPDATE: T_ID • T_INC
   43       | T_ID • T_DEC

    T_INC  shift, and go to state 51
    T_DEC  shift, and go to state 52

    $default  reduce using rule 36 (F)


State 29

   37 F: T_NUM •

    $default  reduce using rule 37 (F)


State 30

   25 EXPR: T_NOT • EXPR

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    EXPR    go to state 53
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 31

   26 EXPR: T_BOOLLITERAL •

    $default  reduce using rule 26 (EXPR)


State 32

   27 EXPR: T_STRLITERAL •
   38 F: T_STRLITERAL •

    T_EQCOMP     reduce using rule 27 (EXPR)
    T_EQCOMP     [reduce using rule 38 (F)]
    T_NOTEQUAL   reduce using rule 27 (EXPR)
    T_NOTEQUAL   [reduce using rule 38 (F)]
    T_GREATEREQ  reduce using rule 27 (EXPR)
    T_GREATEREQ  [reduce using rule 38 (F)]
    T_LESSEREQ   reduce using rule 27 (EXPR)
    T_LESSEREQ   [reduce using rule 38 (F)]
    T_OROR       reduce using rule 27 (EXPR)
    T_OROR       [reduce using rule 38 (F)]
    T_ANDAND     reduce using rule 27 (EXPR)
    T_ANDAND     [reduce using rule 38 (F)]
    ';'          reduce using rule 27 (EXPR)
    ';'          [reduce using rule 38 (F)]
    ','          reduce using rule 27 (EXPR)
    ','          [reduce using rule 38 (F)]
    ']'          reduce using rule 27 (EXPR)
    ']'          [reduce using rule 38 (F)]
    '+'          reduce using rule 38 (F)
    '-'          reduce using rule 38 (F)
    '*'          reduce using rule 38 (F)
    '/'          reduce using rule 38 (F)
    ')'          reduce using rule 27 (EXPR)
    ')'          [reduce using rule 38 (F)]
    '<'          reduce using rule 27 (EXPR)
    '<'          [reduce using rule 38 (F)]
    '>'          reduce using rule 27 (EXPR)
    '>'          [reduce using rule 38 (F)]
    '}'          reduce using rule 27 (EXPR)
    '}'          [reduce using rule 38 (F)]
    $default     reduce using rule 27 (EXPR)


State 33

   35 F: '(' • EXPR ')'

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    EXPR    go to state 54
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 34

   21 ASSGN: T_ID '[' EXPR • ']' '=' EXPR
   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    ']'          shift, and go to state 61
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    REL_OP  go to state 64


State 35

   28 EXPR: E •
   29 E: E • '+' T
   30  | E • '-' T

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 28 (EXPR)


State 36

   31 E: T •
   32 T: T • '*' F
   33  | T • '/' F

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68

    $default  reduce using rule 31 (E)


State 37

   34 T: F •

    $default  reduce using rule 34 (T)


State 38

   39 F: UPDATE •

    $default  reduce using rule 39 (F)


State 39

   20 ASSGN: T_ID $@1 '=' • EXPR

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    EXPR    go to state 69
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 40

    4 PROG: DECLR ';' PROG •

    $default  reduce using rule 4 (PROG)


State 41

   60 MAIN: TYPE T_MAIN '(' • EMPTY_LISTVAR ')' '{' $@2 STMT '}'

    T_ID  shift, and go to state 20

    $default  reduce using rule 62 (EMPTY_LISTVAR)

    LISTVAR        go to state 70
    VAR            go to state 22
    EMPTY_LISTVAR  go to state 71


State 42

   10 VAR: T_ID '=' • EXPR
   56 ARRAY_INIT: '=' • '{' ARRAY_LIST '}'

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33
    '{'            shift, and go to state 72

    EXPR    go to state 73
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 43

   12 VAR: T_ID '[' • T_NUM ']'
   53 ARRAY_DIM: '[' • T_NUM ']' ARRAY_DIM
   54          | '[' • T_ID ']'
   55          | '[' • T_NUM ']'

    T_ID   shift, and go to state 74
    T_NUM  shift, and go to state 75


State 44

   13 VAR: T_ID ARRAY_DECL •

    $default  reduce using rule 13 (VAR)


State 45

   50 ARRAY_DECL: ARRAY_DIM • ARRAY_INIT
   51           | ARRAY_DIM •

    '='  shift, and go to state 76

    $default  reduce using rule 51 (ARRAY_DECL)

    ARRAY_INIT  go to state 77


State 46

   52 ARRAY_DECL: ARRAY_INIT •

    $default  reduce using rule 52 (ARRAY_DECL)


State 47

    8 LISTVAR: LISTVAR ',' • VAR

    T_ID  shift, and go to state 20

    VAR  go to state 78


State 48

    5 PROG: ASSGN ';' PROG •

    $default  reduce using rule 5 (PROG)


State 49

   40 UPDATE: T_INC T_ID •

    $default  reduce using rule 40 (UPDATE)


State 50

   41 UPDATE: T_DEC T_ID •

    $default  reduce using rule 41 (UPDATE)


State 51

   42 UPDATE: T_ID T_INC •

    $default  reduce using rule 42 (UPDATE)


State 52

   43 UPDATE: T_ID T_DEC •

    $default  reduce using rule 43 (UPDATE)


State 53

   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR
   25     | T_NOT EXPR •

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    T_EQCOMP     [reduce using rule 25 (EXPR)]
    T_NOTEQUAL   [reduce using rule 25 (EXPR)]
    T_GREATEREQ  [reduce using rule 25 (EXPR)]
    T_LESSEREQ   [reduce using rule 25 (EXPR)]
    T_OROR       [reduce using rule 25 (EXPR)]
    T_ANDAND     [reduce using rule 25 (EXPR)]
    '<'          [reduce using rule 25 (EXPR)]
    '>'          [reduce using rule 25 (EXPR)]
    $default     reduce using rule 25 (EXPR)

    REL_OP  go to state 64


State 54

   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR
   35 F: '(' EXPR • ')'

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    ')'          shift, and go to state 79
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    REL_OP  go to state 64


State 55

   48 REL_OP: T_EQCOMP •

    $default  reduce using rule 48 (REL_OP)


State 56

   49 REL_OP: T_NOTEQUAL •

    $default  reduce using rule 49 (REL_OP)


State 57

   45 REL_OP: T_GREATEREQ •

    $default  reduce using rule 45 (REL_OP)


State 58

   44 REL_OP: T_LESSEREQ •

    $default  reduce using rule 44 (REL_OP)


State 59

   23 EXPR: EXPR T_OROR • EXPR

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    EXPR    go to state 80
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 60

   24 EXPR: EXPR T_ANDAND • EXPR

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    EXPR    go to state 81
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 61

   21 ASSGN: T_ID '[' EXPR ']' • '=' EXPR

    '='  shift, and go to state 82


State 62

   46 REL_OP: '<' •

    $default  reduce using rule 46 (REL_OP)


State 63

   47 REL_OP: '>' •

    $default  reduce using rule 47 (REL_OP)


State 64

   22 EXPR: EXPR REL_OP • E

    T_INC         shift, and go to state 26
    T_DEC         shift, and go to state 27
    T_ID          shift, and go to state 28
    T_NUM         shift, and go to state 29
    T_STRLITERAL  shift, and go to state 83
    '('           shift, and go to state 33

    E       go to state 84
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 65

   29 E: E '+' • T

    T_INC         shift, and go to state 26
    T_DEC         shift, and go to state 27
    T_ID          shift, and go to state 28
    T_NUM         shift, and go to state 29
    T_STRLITERAL  shift, and go to state 83
    '('           shift, and go to state 33

    T       go to state 85
    F       go to state 37
    UPDATE  go to state 38


State 66

   30 E: E '-' • T

    T_INC         shift, and go to state 26
    T_DEC         shift, and go to state 27
    T_ID          shift, and go to state 28
    T_NUM         shift, and go to state 29
    T_STRLITERAL  shift, and go to state 83
    '('           shift, and go to state 33

    T       go to state 86
    F       go to state 37
    UPDATE  go to state 38


State 67

   32 T: T '*' • F

    T_INC         shift, and go to state 26
    T_DEC         shift, and go to state 27
    T_ID          shift, and go to state 28
    T_NUM         shift, and go to state 29
    T_STRLITERAL  shift, and go to state 83
    '('           shift, and go to state 33

    F       go to state 87
    UPDATE  go to state 38


State 68

   33 T: T '/' • F

    T_INC         shift, and go to state 26
    T_DEC         shift, and go to state 27
    T_ID          shift, and go to state 28
    T_NUM         shift, and go to state 29
    T_STRLITERAL  shift, and go to state 83
    '('           shift, and go to state 33

    F       go to state 88
    UPDATE  go to state 38


State 69

   20 ASSGN: T_ID $@1 '=' EXPR •
   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    $default  reduce using rule 20 (ASSGN)

    REL_OP  go to state 64


State 70

    8 LISTVAR: LISTVAR • ',' VAR
   61 EMPTY_LISTVAR: LISTVAR •

    ','  shift, and go to state 47

    $default  reduce using rule 61 (EMPTY_LISTVAR)


State 71

   60 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR • ')' '{' $@2 STMT '}'

    ')'  shift, and go to state 89


State 72

   56 ARRAY_INIT: '=' '{' • ARRAY_LIST '}'

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    EXPR        go to state 90
    E           go to state 35
    T           go to state 36
    F           go to state 37
    UPDATE      go to state 38
    ARRAY_LIST  go to state 91


State 73

   10 VAR: T_ID '=' EXPR •
   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    $default  reduce using rule 10 (VAR)

    REL_OP  go to state 64


State 74

   54 ARRAY_DIM: '[' T_ID • ']'

    ']'  shift, and go to state 92


State 75

   12 VAR: T_ID '[' T_NUM • ']'
   53 ARRAY_DIM: '[' T_NUM • ']' ARRAY_DIM
   55          | '[' T_NUM • ']'

    ']'  shift, and go to state 93


State 76

   56 ARRAY_INIT: '=' • '{' ARRAY_LIST '}'

    '{'  shift, and go to state 72


State 77

   50 ARRAY_DECL: ARRAY_DIM ARRAY_INIT •

    $default  reduce using rule 50 (ARRAY_DECL)


State 78

    8 LISTVAR: LISTVAR ',' VAR •

    $default  reduce using rule 8 (LISTVAR)


State 79

   35 F: '(' EXPR ')' •

    $default  reduce using rule 35 (F)


State 80

   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   23     | EXPR T_OROR EXPR •
   24     | EXPR • T_ANDAND EXPR

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    T_EQCOMP     [reduce using rule 23 (EXPR)]
    T_NOTEQUAL   [reduce using rule 23 (EXPR)]
    T_GREATEREQ  [reduce using rule 23 (EXPR)]
    T_LESSEREQ   [reduce using rule 23 (EXPR)]
    T_OROR       [reduce using rule 23 (EXPR)]
    T_ANDAND     [reduce using rule 23 (EXPR)]
    '<'          [reduce using rule 23 (EXPR)]
    '>'          [reduce using rule 23 (EXPR)]
    $default     reduce using rule 23 (EXPR)

    REL_OP  go to state 64


State 81

   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR
   24     | EXPR T_ANDAND EXPR •

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    T_EQCOMP     [reduce using rule 24 (EXPR)]
    T_NOTEQUAL   [reduce using rule 24 (EXPR)]
    T_GREATEREQ  [reduce using rule 24 (EXPR)]
    T_LESSEREQ   [reduce using rule 24 (EXPR)]
    T_OROR       [reduce using rule 24 (EXPR)]
    T_ANDAND     [reduce using rule 24 (EXPR)]
    '<'          [reduce using rule 24 (EXPR)]
    '>'          [reduce using rule 24 (EXPR)]
    $default     reduce using rule 24 (EXPR)

    REL_OP  go to state 64


State 82

   21 ASSGN: T_ID '[' EXPR ']' '=' • EXPR

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    EXPR    go to state 94
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 83

   38 F: T_STRLITERAL •

    $default  reduce using rule 38 (F)


State 84

   22 EXPR: EXPR REL_OP E •
   29 E: E • '+' T
   30  | E • '-' T

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 22 (EXPR)


State 85

   29 E: E '+' T •
   32 T: T • '*' F
   33  | T • '/' F

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68

    $default  reduce using rule 29 (E)


State 86

   30 E: E '-' T •
   32 T: T • '*' F
   33  | T • '/' F

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68

    $default  reduce using rule 30 (E)


State 87

   32 T: T '*' F •

    $default  reduce using rule 32 (T)


State 88

   33 T: T '/' F •

    $default  reduce using rule 33 (T)


State 89

   60 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' • '{' $@2 STMT '}'

    '{'  shift, and go to state 95


State 90

   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR
   58 ARRAY_LIST: EXPR •

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    $default  reduce using rule 58 (ARRAY_LIST)

    REL_OP  go to state 64


State 91

   56 ARRAY_INIT: '=' '{' ARRAY_LIST • '}'
   57 ARRAY_LIST: ARRAY_LIST • ',' EXPR

    ','  shift, and go to state 96
    '}'  shift, and go to state 97


State 92

   54 ARRAY_DIM: '[' T_ID ']' •

    $default  reduce using rule 54 (ARRAY_DIM)


State 93

   12 VAR: T_ID '[' T_NUM ']' •
   53 ARRAY_DIM: '[' T_NUM ']' • ARRAY_DIM
   55          | '[' T_NUM ']' •

    '['  shift, and go to state 98

    ';'       reduce using rule 12 (VAR)
    ';'       [reduce using rule 55 (ARRAY_DIM)]
    ','       reduce using rule 12 (VAR)
    ','       [reduce using rule 55 (ARRAY_DIM)]
    '='       reduce using rule 55 (ARRAY_DIM)
    ')'       reduce using rule 12 (VAR)
    ')'       [reduce using rule 55 (ARRAY_DIM)]
    $default  reduce using rule 12 (VAR)

    ARRAY_DIM  go to state 99


State 94

   21 ASSGN: T_ID '[' EXPR ']' '=' EXPR •
   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    $default  reduce using rule 21 (ASSGN)

    REL_OP  go to state 64


State 95

   60 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' '{' • $@2 STMT '}'

    $default  reduce using rule 59 ($@2)

    $@2  go to state 100


State 96

   57 ARRAY_LIST: ARRAY_LIST ',' • EXPR

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    EXPR    go to state 101
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 97

   56 ARRAY_INIT: '=' '{' ARRAY_LIST '}' •

    $default  reduce using rule 56 (ARRAY_INIT)


State 98

   53 ARRAY_DIM: '[' • T_NUM ']' ARRAY_DIM
   54          | '[' • T_ID ']'
   55          | '[' • T_NUM ']'

    T_ID   shift, and go to state 74
    T_NUM  shift, and go to state 102


State 99

   53 ARRAY_DIM: '[' T_NUM ']' ARRAY_DIM •

    $default  reduce using rule 53 (ARRAY_DIM)


State 100

   60 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' '{' $@2 • STMT '}'

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    $default  reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 113
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 101

   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR
   57 ARRAY_LIST: ARRAY_LIST ',' EXPR •

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    $default  reduce using rule 57 (ARRAY_LIST)

    REL_OP  go to state 64


State 102

   53 ARRAY_DIM: '[' T_NUM • ']' ARRAY_DIM
   55          | '[' T_NUM • ']'

    ']'  shift, and go to state 124


State 103

   74 IF_ELSE: T_IF • '(' COND ')' '{' STMT '}' T_ELSE '{' STMT '}' STMT
   75        | T_IF • '(' COND ')' '{' STMT '}' STMT
   76        | T_IF • '(' COND ')' STMT_NO_BLOCK STMT
   77        | T_IF • '(' COND ')' STMT_NO_BLOCK T_ELSE STMT_NO_BLOCK STMT

    '('  shift, and go to state 125


State 104

   86 DO_WHILE_LOOP: T_DO • '{' STMT '}' T_WHILE '(' COND ')' ';'

    '{'  shift, and go to state 126


State 105

   78 FOR_LOOP: T_FOR • '(' FOR_INIT ';' COND ';' FOR_UP ')' '{' STMT '}'

    '('  shift, and go to state 127


State 106

   85 WHILE_LOOP: T_WHILE • '(' COND ')' BLOCK

    '('  shift, and go to state 128


State 107

   87 SWITCH_STMT: T_SWITCH • '(' T_ID ')' '{' CASES '}'

    '('  shift, and go to state 129


State 108

   98 RET_STMT: T_RETURN • EXPR ';'
   99         | T_RETURN • ';'

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 28
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    ';'            shift, and go to state 130
    '('            shift, and go to state 33

    EXPR    go to state 131
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38


State 109

  104 BLOCK: '{' • $@3 STMT '}'

    $default  reduce using rule 103 ($@3)

    $@3  go to state 132


State 110

  100 STMT_NO_BLOCK: DECLR • ';'

    ';'  shift, and go to state 133


State 111

    7 DECLR: TYPE • LISTVAR
   91 FUNC_DECL: TYPE • T_ID '(' PARAM_LIST ')' ';'
   92 FUNC_DEF: TYPE • T_ID '(' PARAM_LIST ')' BLOCK
   93         | TYPE • T_ID '(' PARAM_LIST ')' BLOCK RET_STMT

    T_ID  shift, and go to state 134

    LISTVAR  go to state 21
    VAR      go to state 22


State 112

  101 STMT_NO_BLOCK: ASSGN • ';'

    ';'  shift, and go to state 135


State 113

   60 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' '{' $@2 STMT • '}'

    '}'  shift, and go to state 136


State 114

   65 STMT: IF_ELSE • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 137
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 115

   66 STMT: FOR_LOOP • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 138
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 116

   67 STMT: WHILE_LOOP • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 139
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 117

   72 STMT: DO_WHILE_LOOP • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 140
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 118

   68 STMT: SWITCH_STMT • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 141
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 119

   69 STMT: FUNC_DECL • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 142
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 120

   70 STMT: FUNC_DEF • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 143
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 121

   71 STMT: RET_STMT • STMT
  102 STMT_NO_BLOCK: RET_STMT •

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_INT      [reduce using rule 102 (STMT_NO_BLOCK)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 102 (STMT_NO_BLOCK)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 102 (STMT_NO_BLOCK)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 102 (STMT_NO_BLOCK)]
    T_IF       [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 102 (STMT_NO_BLOCK)]
    T_DO       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 102 (STMT_NO_BLOCK)]
    T_ID       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 102 (STMT_NO_BLOCK)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 102 (STMT_NO_BLOCK)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 102 (STMT_NO_BLOCK)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 102 (STMT_NO_BLOCK)]
    T_BREAK    reduce using rule 73 (STMT)
    T_BREAK    [reduce using rule 102 (STMT_NO_BLOCK)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 102 (STMT_NO_BLOCK)]
    T_RETURN   [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 102 (STMT_NO_BLOCK)]
    '{'        [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 102 (STMT_NO_BLOCK)]
    '}'        reduce using rule 73 (STMT)
    '}'        [reduce using rule 102 (STMT_NO_BLOCK)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 144
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 122

   63 STMT: STMT_NO_BLOCK • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 145
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 123

   64 STMT: BLOCK • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 146
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 124

   53 ARRAY_DIM: '[' T_NUM ']' • ARRAY_DIM
   55          | '[' T_NUM ']' •

    '['  shift, and go to state 98

    $default  reduce using rule 55 (ARRAY_DIM)

    ARRAY_DIM  go to state 99


State 125

   74 IF_ELSE: T_IF '(' • COND ')' '{' STMT '}' T_ELSE '{' STMT '}' STMT
   75        | T_IF '(' • COND ')' '{' STMT '}' STMT
   76        | T_IF '(' • COND ')' STMT_NO_BLOCK STMT
   77        | T_IF '(' • COND ')' STMT_NO_BLOCK T_ELSE STMT_NO_BLOCK STMT

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 147
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    ASSGN   go to state 148
    EXPR    go to state 149
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38
    COND    go to state 150


State 126

   86 DO_WHILE_LOOP: T_DO '{' • STMT '}' T_WHILE '(' COND ')' ';'

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    $default  reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 151
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 127

   78 FOR_LOOP: T_FOR '(' • FOR_INIT ';' COND ';' FOR_UP ')' '{' STMT '}'

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_ID       shift, and go to state 6
    T_BOOLEAN  shift, and go to state 7

    $default  reduce using rule 81 (FOR_INIT)

    DECLR     go to state 152
    TYPE      go to state 153
    ASSGN     go to state 154
    FOR_INIT  go to state 155


State 128

   85 WHILE_LOOP: T_WHILE '(' • COND ')' BLOCK

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 147
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    ASSGN   go to state 148
    EXPR    go to state 149
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38
    COND    go to state 156


State 129

   87 SWITCH_STMT: T_SWITCH '(' • T_ID ')' '{' CASES '}'

    T_ID  shift, and go to state 157


State 130

   99 RET_STMT: T_RETURN ';' •

    $default  reduce using rule 99 (RET_STMT)


State 131

   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR
   98 RET_STMT: T_RETURN EXPR • ';'

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    ';'          shift, and go to state 158
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    REL_OP  go to state 64


State 132

  104 BLOCK: '{' $@3 • STMT '}'

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    $default  reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 159
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 133

  100 STMT_NO_BLOCK: DECLR ';' •

    $default  reduce using rule 100 (STMT_NO_BLOCK)


State 134

   10 VAR: T_ID • '=' EXPR
   11    | T_ID •
   12    | T_ID • '[' T_NUM ']'
   13    | T_ID • ARRAY_DECL
   91 FUNC_DECL: TYPE T_ID • '(' PARAM_LIST ')' ';'
   92 FUNC_DEF: TYPE T_ID • '(' PARAM_LIST ')' BLOCK
   93         | TYPE T_ID • '(' PARAM_LIST ')' BLOCK RET_STMT

    '='  shift, and go to state 42
    '['  shift, and go to state 43
    '('  shift, and go to state 160

    $default  reduce using rule 11 (VAR)

    ARRAY_DECL  go to state 44
    ARRAY_DIM   go to state 45
    ARRAY_INIT  go to state 46


State 135

  101 STMT_NO_BLOCK: ASSGN ';' •

    $default  reduce using rule 101 (STMT_NO_BLOCK)


State 136

   60 MAIN: TYPE T_MAIN '(' EMPTY_LISTVAR ')' '{' $@2 STMT '}' •

    $default  reduce using rule 60 (MAIN)


State 137

   65 STMT: IF_ELSE STMT •

    $default  reduce using rule 65 (STMT)


State 138

   66 STMT: FOR_LOOP STMT •

    $default  reduce using rule 66 (STMT)


State 139

   67 STMT: WHILE_LOOP STMT •

    $default  reduce using rule 67 (STMT)


State 140

   72 STMT: DO_WHILE_LOOP STMT •

    $default  reduce using rule 72 (STMT)


State 141

   68 STMT: SWITCH_STMT STMT •

    $default  reduce using rule 68 (STMT)


State 142

   69 STMT: FUNC_DECL STMT •

    $default  reduce using rule 69 (STMT)


State 143

   70 STMT: FUNC_DEF STMT •

    $default  reduce using rule 70 (STMT)


State 144

   71 STMT: RET_STMT STMT •

    $default  reduce using rule 71 (STMT)


State 145

   63 STMT: STMT_NO_BLOCK STMT •

    $default  reduce using rule 63 (STMT)


State 146

   64 STMT: BLOCK STMT •

    $default  reduce using rule 64 (STMT)


State 147

   20 ASSGN: T_ID • $@1 '=' EXPR
   21      | T_ID • '[' EXPR ']' '=' EXPR
   36 F: T_ID •
   42 UPDATE: T_ID • T_INC
   43       | T_ID • T_DEC

    T_INC  shift, and go to state 51
    T_DEC  shift, and go to state 52
    '['    shift, and go to state 15

    '='       reduce using rule 19 ($@1)
    $default  reduce using rule 36 (F)

    $@1  go to state 16


State 148

  106 COND: ASSGN •

    $default  reduce using rule 106 (COND)


State 149

   22 EXPR: EXPR • REL_OP E
   23     | EXPR • T_OROR EXPR
   24     | EXPR • T_ANDAND EXPR
  105 COND: EXPR •

    T_EQCOMP     shift, and go to state 55
    T_NOTEQUAL   shift, and go to state 56
    T_GREATEREQ  shift, and go to state 57
    T_LESSEREQ   shift, and go to state 58
    T_OROR       shift, and go to state 59
    T_ANDAND     shift, and go to state 60
    '<'          shift, and go to state 62
    '>'          shift, and go to state 63

    $default  reduce using rule 105 (COND)

    REL_OP  go to state 64


State 150

   74 IF_ELSE: T_IF '(' COND • ')' '{' STMT '}' T_ELSE '{' STMT '}' STMT
   75        | T_IF '(' COND • ')' '{' STMT '}' STMT
   76        | T_IF '(' COND • ')' STMT_NO_BLOCK STMT
   77        | T_IF '(' COND • ')' STMT_NO_BLOCK T_ELSE STMT_NO_BLOCK STMT

    ')'  shift, and go to state 161


State 151

   86 DO_WHILE_LOOP: T_DO '{' STMT • '}' T_WHILE '(' COND ')' ';'

    '}'  shift, and go to state 162


State 152

   79 FOR_INIT: DECLR •

    $default  reduce using rule 79 (FOR_INIT)


State 153

    7 DECLR: TYPE • LISTVAR

    T_ID  shift, and go to state 20

    LISTVAR  go to state 21
    VAR      go to state 22


State 154

   80 FOR_INIT: ASSGN •

    $default  reduce using rule 80 (FOR_INIT)


State 155

   78 FOR_LOOP: T_FOR '(' FOR_INIT • ';' COND ';' FOR_UP ')' '{' STMT '}'

    ';'  shift, and go to state 163


State 156

   85 WHILE_LOOP: T_WHILE '(' COND • ')' BLOCK

    ')'  shift, and go to state 164


State 157

   87 SWITCH_STMT: T_SWITCH '(' T_ID • ')' '{' CASES '}'

    ')'  shift, and go to state 165


State 158

   98 RET_STMT: T_RETURN EXPR ';' •

    $default  reduce using rule 98 (RET_STMT)


State 159

  104 BLOCK: '{' $@3 STMT • '}'

    '}'  shift, and go to state 166


State 160

   91 FUNC_DECL: TYPE T_ID '(' • PARAM_LIST ')' ';'
   92 FUNC_DEF: TYPE T_ID '(' • PARAM_LIST ')' BLOCK
   93         | TYPE T_ID '(' • PARAM_LIST ')' BLOCK RET_STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_BOOLEAN  shift, and go to state 7

    $default  reduce using rule 96 (PARAM_LIST)

    TYPE        go to state 167
    PARAM_LIST  go to state 168
    PARAM       go to state 169


State 161

   74 IF_ELSE: T_IF '(' COND ')' • '{' STMT '}' T_ELSE '{' STMT '}' STMT
   75        | T_IF '(' COND ')' • '{' STMT '}' STMT
   76        | T_IF '(' COND ')' • STMT_NO_BLOCK STMT
   77        | T_IF '(' COND ')' • STMT_NO_BLOCK T_ELSE STMT_NO_BLOCK STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_ID       shift, and go to state 6
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 170

    DECLR          go to state 110
    TYPE           go to state 153
    ASSGN          go to state 112
    RET_STMT       go to state 171
    STMT_NO_BLOCK  go to state 172


State 162

   86 DO_WHILE_LOOP: T_DO '{' STMT '}' • T_WHILE '(' COND ')' ';'

    T_WHILE  shift, and go to state 173


State 163

   78 FOR_LOOP: T_FOR '(' FOR_INIT ';' • COND ';' FOR_UP ')' '{' STMT '}'

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 147
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    ASSGN   go to state 148
    EXPR    go to state 149
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38
    COND    go to state 174


State 164

   85 WHILE_LOOP: T_WHILE '(' COND ')' • BLOCK

    '{'  shift, and go to state 109

    BLOCK  go to state 175


State 165

   87 SWITCH_STMT: T_SWITCH '(' T_ID ')' • '{' CASES '}'

    '{'  shift, and go to state 176


State 166

  104 BLOCK: '{' $@3 STMT '}' •

    $default  reduce using rule 104 (BLOCK)


State 167

   97 PARAM: TYPE • T_ID

    T_ID  shift, and go to state 177


State 168

   91 FUNC_DECL: TYPE T_ID '(' PARAM_LIST • ')' ';'
   92 FUNC_DEF: TYPE T_ID '(' PARAM_LIST • ')' BLOCK
   93         | TYPE T_ID '(' PARAM_LIST • ')' BLOCK RET_STMT
   94 PARAM_LIST: PARAM_LIST • ',' PARAM

    ','  shift, and go to state 178
    ')'  shift, and go to state 179


State 169

   95 PARAM_LIST: PARAM •

    $default  reduce using rule 95 (PARAM_LIST)


State 170

   74 IF_ELSE: T_IF '(' COND ')' '{' • STMT '}' T_ELSE '{' STMT '}' STMT
   75        | T_IF '(' COND ')' '{' • STMT '}' STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    $default  reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 180
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 171

  102 STMT_NO_BLOCK: RET_STMT •

    $default  reduce using rule 102 (STMT_NO_BLOCK)


State 172

   76 IF_ELSE: T_IF '(' COND ')' STMT_NO_BLOCK • STMT
   77        | T_IF '(' COND ')' STMT_NO_BLOCK • T_ELSE STMT_NO_BLOCK STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_ELSE     shift, and go to state 181
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 182
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 173

   86 DO_WHILE_LOOP: T_DO '{' STMT '}' T_WHILE • '(' COND ')' ';'

    '('  shift, and go to state 183


State 174

   78 FOR_LOOP: T_FOR '(' FOR_INIT ';' COND • ';' FOR_UP ')' '{' STMT '}'

    ';'  shift, and go to state 184


State 175

   85 WHILE_LOOP: T_WHILE '(' COND ')' BLOCK •

    $default  reduce using rule 85 (WHILE_LOOP)


State 176

   87 SWITCH_STMT: T_SWITCH '(' T_ID ')' '{' • CASES '}'

    T_CASE  shift, and go to state 185

    CASES  go to state 186
    CASE   go to state 187


State 177

   97 PARAM: TYPE T_ID •

    $default  reduce using rule 97 (PARAM)


State 178

   94 PARAM_LIST: PARAM_LIST ',' • PARAM

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_BOOLEAN  shift, and go to state 7

    TYPE   go to state 167
    PARAM  go to state 188


State 179

   91 FUNC_DECL: TYPE T_ID '(' PARAM_LIST ')' • ';'
   92 FUNC_DEF: TYPE T_ID '(' PARAM_LIST ')' • BLOCK
   93         | TYPE T_ID '(' PARAM_LIST ')' • BLOCK RET_STMT

    ';'  shift, and go to state 189
    '{'  shift, and go to state 109

    BLOCK  go to state 190


State 180

   74 IF_ELSE: T_IF '(' COND ')' '{' STMT • '}' T_ELSE '{' STMT '}' STMT
   75        | T_IF '(' COND ')' '{' STMT • '}' STMT

    '}'  shift, and go to state 191


State 181

   77 IF_ELSE: T_IF '(' COND ')' STMT_NO_BLOCK T_ELSE • STMT_NO_BLOCK STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_ID       shift, and go to state 6
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108

    DECLR          go to state 110
    TYPE           go to state 153
    ASSGN          go to state 112
    RET_STMT       go to state 171
    STMT_NO_BLOCK  go to state 192


State 182

   76 IF_ELSE: T_IF '(' COND ')' STMT_NO_BLOCK STMT •

    $default  reduce using rule 76 (IF_ELSE)


State 183

   86 DO_WHILE_LOOP: T_DO '{' STMT '}' T_WHILE '(' • COND ')' ';'

    T_INC          shift, and go to state 26
    T_DEC          shift, and go to state 27
    T_ID           shift, and go to state 147
    T_NUM          shift, and go to state 29
    T_NOT          shift, and go to state 30
    T_BOOLLITERAL  shift, and go to state 31
    T_STRLITERAL   shift, and go to state 32
    '('            shift, and go to state 33

    ASSGN   go to state 148
    EXPR    go to state 149
    E       go to state 35
    T       go to state 36
    F       go to state 37
    UPDATE  go to state 38
    COND    go to state 193


State 184

   78 FOR_LOOP: T_FOR '(' FOR_INIT ';' COND ';' • FOR_UP ')' '{' STMT '}'

    T_INC  shift, and go to state 26
    T_DEC  shift, and go to state 27
    T_ID   shift, and go to state 194

    $default  reduce using rule 84 (FOR_UP)

    ASSGN   go to state 195
    UPDATE  go to state 196
    FOR_UP  go to state 197


State 185

   90 CASE: T_CASE • T_NUM ':' STMT T_BREAK ';'

    T_NUM  shift, and go to state 198


State 186

   87 SWITCH_STMT: T_SWITCH '(' T_ID ')' '{' CASES • '}'
   88 CASES: CASES • CASE

    T_CASE  shift, and go to state 185
    '}'     shift, and go to state 199

    CASE  go to state 200


State 187

   89 CASES: CASE •

    $default  reduce using rule 89 (CASES)


State 188

   94 PARAM_LIST: PARAM_LIST ',' PARAM •

    $default  reduce using rule 94 (PARAM_LIST)


State 189

   91 FUNC_DECL: TYPE T_ID '(' PARAM_LIST ')' ';' •

    $default  reduce using rule 91 (FUNC_DECL)


State 190

   92 FUNC_DEF: TYPE T_ID '(' PARAM_LIST ')' BLOCK •
   93         | TYPE T_ID '(' PARAM_LIST ')' BLOCK • RET_STMT

    T_RETURN  shift, and go to state 108

    T_RETURN  [reduce using rule 92 (FUNC_DEF)]
    $default  reduce using rule 92 (FUNC_DEF)

    RET_STMT  go to state 201


State 191

   74 IF_ELSE: T_IF '(' COND ')' '{' STMT '}' • T_ELSE '{' STMT '}' STMT
   75        | T_IF '(' COND ')' '{' STMT '}' • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_ELSE     shift, and go to state 202
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 203
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 192

   77 IF_ELSE: T_IF '(' COND ')' STMT_NO_BLOCK T_ELSE STMT_NO_BLOCK • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 204
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 193

   86 DO_WHILE_LOOP: T_DO '{' STMT '}' T_WHILE '(' COND • ')' ';'

    ')'  shift, and go to state 205


State 194

   20 ASSGN: T_ID • $@1 '=' EXPR
   21      | T_ID • '[' EXPR ']' '=' EXPR
   42 UPDATE: T_ID • T_INC
   43       | T_ID • T_DEC

    T_INC  shift, and go to state 51
    T_DEC  shift, and go to state 52
    '['    shift, and go to state 15

    $default  reduce using rule 19 ($@1)

    $@1  go to state 16


State 195

   83 FOR_UP: ASSGN •

    $default  reduce using rule 83 (FOR_UP)


State 196

   82 FOR_UP: UPDATE •

    $default  reduce using rule 82 (FOR_UP)


State 197

   78 FOR_LOOP: T_FOR '(' FOR_INIT ';' COND ';' FOR_UP • ')' '{' STMT '}'

    ')'  shift, and go to state 206


State 198

   90 CASE: T_CASE T_NUM • ':' STMT T_BREAK ';'

    ':'  shift, and go to state 207


State 199

   87 SWITCH_STMT: T_SWITCH '(' T_ID ')' '{' CASES '}' •

    $default  reduce using rule 87 (SWITCH_STMT)


State 200

   88 CASES: CASES CASE •

    $default  reduce using rule 88 (CASES)


State 201

   93 FUNC_DEF: TYPE T_ID '(' PARAM_LIST ')' BLOCK RET_STMT •

    $default  reduce using rule 93 (FUNC_DEF)


State 202

   74 IF_ELSE: T_IF '(' COND ')' '{' STMT '}' T_ELSE • '{' STMT '}' STMT

    '{'  shift, and go to state 208


State 203

   75 IF_ELSE: T_IF '(' COND ')' '{' STMT '}' STMT •

    $default  reduce using rule 75 (IF_ELSE)


State 204

   77 IF_ELSE: T_IF '(' COND ')' STMT_NO_BLOCK T_ELSE STMT_NO_BLOCK STMT •

    $default  reduce using rule 77 (IF_ELSE)


State 205

   86 DO_WHILE_LOOP: T_DO '{' STMT '}' T_WHILE '(' COND ')' • ';'

    ';'  shift, and go to state 209


State 206

   78 FOR_LOOP: T_FOR '(' FOR_INIT ';' COND ';' FOR_UP ')' • '{' STMT '}'

    '{'  shift, and go to state 210


State 207

   90 CASE: T_CASE T_NUM ':' • STMT T_BREAK ';'

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    $default  reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 211
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 208

   74 IF_ELSE: T_IF '(' COND ')' '{' STMT '}' T_ELSE '{' • STMT '}' STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    $default  reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 212
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 209

   86 DO_WHILE_LOOP: T_DO '{' STMT '}' T_WHILE '(' COND ')' ';' •

    $default  reduce using rule 86 (DO_WHILE_LOOP)


State 210

   78 FOR_LOOP: T_FOR '(' FOR_INIT ';' COND ';' FOR_UP ')' '{' • STMT '}'

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    $default  reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 213
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 211

   90 CASE: T_CASE T_NUM ':' STMT • T_BREAK ';'

    T_BREAK  shift, and go to state 214


State 212

   74 IF_ELSE: T_IF '(' COND ')' '{' STMT '}' T_ELSE '{' STMT • '}' STMT

    '}'  shift, and go to state 215


State 213

   78 FOR_LOOP: T_FOR '(' FOR_INIT ';' COND ';' FOR_UP ')' '{' STMT • '}'

    '}'  shift, and go to state 216


State 214

   90 CASE: T_CASE T_NUM ':' STMT T_BREAK • ';'

    ';'  shift, and go to state 217


State 215

   74 IF_ELSE: T_IF '(' COND ')' '{' STMT '}' T_ELSE '{' STMT '}' • STMT

    T_INT      shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_DOUBLE   shift, and go to state 3
    T_FLOAT    shift, and go to state 4
    T_IF       shift, and go to state 103
    T_DO       shift, and go to state 104
    T_ID       shift, and go to state 6
    T_FOR      shift, and go to state 105
    T_WHILE    shift, and go to state 106
    T_SWITCH   shift, and go to state 107
    T_BOOLEAN  shift, and go to state 7
    T_RETURN   shift, and go to state 108
    '{'        shift, and go to state 109

    T_INT      [reduce using rule 73 (STMT)]
    T_CHAR     [reduce using rule 73 (STMT)]
    T_DOUBLE   [reduce using rule 73 (STMT)]
    T_FLOAT    [reduce using rule 73 (STMT)]
    T_IF       [reduce using rule 73 (STMT)]
    T_DO       [reduce using rule 73 (STMT)]
    T_ID       [reduce using rule 73 (STMT)]
    T_FOR      [reduce using rule 73 (STMT)]
    T_WHILE    [reduce using rule 73 (STMT)]
    T_SWITCH   [reduce using rule 73 (STMT)]
    T_BOOLEAN  [reduce using rule 73 (STMT)]
    T_RETURN   [reduce using rule 73 (STMT)]
    '{'        [reduce using rule 73 (STMT)]
    $default   reduce using rule 73 (STMT)

    DECLR          go to state 110
    TYPE           go to state 111
    ASSGN          go to state 112
    STMT           go to state 218
    IF_ELSE        go to state 114
    FOR_LOOP       go to state 115
    WHILE_LOOP     go to state 116
    DO_WHILE_LOOP  go to state 117
    SWITCH_STMT    go to state 118
    FUNC_DECL      go to state 119
    FUNC_DEF       go to state 120
    RET_STMT       go to state 121
    STMT_NO_BLOCK  go to state 122
    BLOCK          go to state 123


State 216

   78 FOR_LOOP: T_FOR '(' FOR_INIT ';' COND ';' FOR_UP ')' '{' STMT '}' •

    $default  reduce using rule 78 (FOR_LOOP)


State 217

   90 CASE: T_CASE T_NUM ':' STMT T_BREAK ';' •

    $default  reduce using rule 90 (CASE)


State 218

   74 IF_ELSE: T_IF '(' COND ')' '{' STMT '}' T_ELSE '{' STMT '}' STMT •

    $default  reduce using rule 74 (IF_ELSE)
